name: Download and Deploy APIs to EC2

on:
  workflow_dispatch:
    inputs:
      apiFolder:
        description: 'API folder to download (or "all")'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - AHS.GC.Web
          - AHS.GC.authorizationportal
          - AHS.GC.ConfigAPI
          - AHS.GC.SmartComm
          - AHS.GC.Cloud
      cloudApi:
        description: 'Specific Cloud API to download (or "all")'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - account
          - activity
          - admin
          - assessments
          - master
          - member

jobs:
  download:
    runs-on: self-hosted
    env:
      RELEASE_REPO: Npraveenreddy/artifacts
      RELEASE_TAG: v8.17.2025.08_RC1
      GH_TOKEN: ${{ secrets.ARTIFACTS_PAT }}

    steps:
      - name: Ensure artifacts folder exists
        shell: bash
        run: |
          ARTIFACTS_DIR="$GITHUB_WORKSPACE/artifacts"
          mkdir -p "$ARTIFACTS_DIR"

      - name: Download and Save Artifacts as ZIP
        shell: bash
        run: |
          apiFolder="${{ github.event.inputs.apiFolder }}"
          cloudApi="${{ github.event.inputs.cloudApi }}"
          artifactsPath="$GITHUB_WORKSPACE/artifacts"

          topLevelApis=("AHS.GC.Web" "AHS.GC.authorizationportal" "AHS.GC.ConfigAPI" "AHS.GC.SmartComm" "AHS.GC.Cloud")
          cloudSubApis=("account" "activity" "admin" "assessments" "master" "member")

          download_zip() {
            name="$1"
            zipPath="$artifactsPath/$name.zip"
            echo "$GH_TOKEN" | gh auth login --with-token
            gh release download "$RELEASE_TAG" \
              --repo "$RELEASE_REPO" \
              --pattern "$name.zip" \
              --dir "$artifactsPath" \
              --clobber
            if [[ -f "$zipPath" ]]; then
              echo "Downloaded $name.zip"
            else
              echo "Failed to download $name.zip"
              exit 1
            fi
          }

          if [[ "$apiFolder" == "all" ]]; then
            for api in "${topLevelApis[@]}"; do
              [[ "$api" != "AHS.GC.Cloud" ]] && download_zip "$api"
            done
          elif [[ "$apiFolder" != "AHS.GC.Cloud" ]]; then
            download_zip "$apiFolder"
          fi

          if [[ "$cloudApi" == "all" ]]; then
            for sub in "${cloudSubApis[@]}"; do
              download_zip "$sub"
            done
          elif [[ " ${cloudSubApis[*]} " == *" $cloudApi "* ]]; then
            download_zip "$cloudApi"
          fi

  deploy:
    runs-on: self-hosted
    needs: download
    env:
      EC2_HOST: ${{ secrets.EC2_HOST }}
      EC2_USER: ${{ secrets.EC2_USER }}
      SSH_KEY: ${{ secrets.EC2_SSH_KEY }}

    steps:
      - name: Deploy to EC2 via SSH
        shell: bash
        run: |
          ARTIFACTS_DIR="$GITHUB_WORKSPACE/artifacts"
          SSH_KEY_FILE="$GITHUB_WORKSPACE/ssh_key.pem"

          # Save SSH key
          echo "$SSH_KEY" > "$SSH_KEY_FILE"
          chmod 600 "$SSH_KEY_FILE"

          # Ensure /tmp exists on EC2
          ssh -i "$SSH_KEY_FILE" -o StrictHostKeyChecking=no "$EC2_USER@$EC2_HOST" "mkdir -p /tmp"

          # Upload all zip files
          scp -i "$SSH_KEY_FILE" -o StrictHostKeyChecking=no "$ARTIFACTS_DIR"/*.zip "$EC2_USER@$EC2_HOST:/tmp/"

          # Extract & deploy
          ssh -i "$SSH_KEY_FILE" -o StrictHostKeyChecking=no "$EC2_USER@$EC2_HOST" << 'EOF'
          for zip in /tmp/*.zip; do
            name=$(basename "$zip" .zip)
            case "$name" in
              "AHS.GC.Web") target="/var/www/Portal" ;;
              "AHS.GC.authorizationportal") target="/var/www/AuthorizationPortal" ;;
              "AHS.GC.ConfigAPI") target="/var/www/CONFIGAPI" ;;
              "AHS.GC.SmartComm") target="/var/www/SmartCommAPI" ;;
              "account"|"activity"|"admin"|"assessments"|"master"|"member") target="/var/www/CloudAPI" ;;
              *) target="/var/www/$name" ;;
            esac
            mkdir -p "$target"
            unzip -o "$zip" -d "$target"
            rm -f "$zip"
          done
          EOF
