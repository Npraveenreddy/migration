name: Download and Deploy APIs to EC2

on:
  workflow_dispatch:
    inputs:
      apiFolder:
        description: 'API folder to download (or "all")'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - AHS.GC.Web
          - AHS.GC.authorizationportal
          - AHS.GC.ConfigAPI
          - AHS.GC.SmartComm
      cloudApi:
        description: 'Specific Cloud API to download (or "all")'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - account
          - activity
          - admin
          - assessments
          - master
          - member

jobs:
  deploy-all:
    runs-on: windows-latest
    strategy:
      matrix:
        api: ${{ fromJson('["AHS.GC.Web","AHS.GC.authorizationportal","AHS.GC.ConfigAPI","AHS.GC.SmartComm","account","activity","admin","assessments","master","member"]') }}
    env:
      RELEASE_REPO: Npraveenreddy/artifacts
      RELEASE_TAG: v8.17.2025.08_RC1
      GH_TOKEN: ${{ secrets.ARTIFACTS_PAT }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: us-east-1
      EC2_INSTANCE_ID: i-0409b449dd184132b

    steps:
      - name: üì¶ Checkout code
        uses: actions/checkout@v4

      - name: üß† Filter APIs based on input
        id: filter
        shell: pwsh
        run: |
          $apiFolder = "${{ github.event.inputs.apiFolder }}"
          $cloudApi = "${{ github.event.inputs.cloudApi }}"
          $topLevelApis = @("AHS.GC.Web","AHS.GC.authorizationportal","AHS.GC.ConfigAPI","AHS.GC.SmartComm")
          $cloudSubApis = @("account","activity","admin","assessments","master","member")

          $selectedApis = @()
          if ($apiFolder -eq "all") { $selectedApis += $topLevelApis }
          elseif ($topLevelApis -contains $apiFolder) { $selectedApis += $apiFolder }

          if ($cloudApi -eq "all") { $selectedApis += $cloudSubApis }
          elseif ($cloudSubApis -contains $cloudApi) { $selectedApis += $cloudApi }

          $selected = $selectedApis -contains "${{ matrix.api }}"
          Write-Output "::set-output name=selected::$selected"

      - name: üì• Download and Extract ${{ matrix.api }}
        if: steps.filter.outputs.selected == 'True'
        shell: pwsh
        run: |
          $name = "${{ matrix.api }}"
          $workspace = $env:GITHUB_WORKSPACE
          $artifactDir = "$workspace\artifacts"
          New-Item -ItemType Directory -Path $artifactDir -Force | Out-Null

          $zipPath = "$artifactDir\$name.zip"
          $extractPath = "$artifactDir\$name"
          echo $env:GH_TOKEN | gh auth login --with-token
          gh release download $env:RELEASE_TAG --repo $env:RELEASE_REPO --pattern "$name.zip" --dir $artifactDir

          if (Test-Path $zipPath) {
            Write-Host "üìÇ Extracting $name.zip to $extractPath"
            Expand-Archive -Path $zipPath -DestinationPath $extractPath -Force
            Write-Host "‚úÖ Extracted $name"
            Get-ChildItem -Path $extractPath -Recurse | ForEach-Object {
              Write-Host "  - $_"
            }
          } else {
            Write-Error "‚ùå Failed to download $name.zip"
            exit 1
          }

      - name: üöÄ Deploy ${{ matrix.api }} to EC2
        if: steps.filter.outputs.selected == 'True'
        shell: pwsh
        run: |
          $name = "${{ matrix.api }}"
          $workspace = $env:GITHUB_WORKSPACE
          $artifactDir = "$workspace\artifacts"
          $sourcePath = "$artifactDir\$name"
          $targetMap = @{
            "AHS.GC.Web"               = "Portal"
            "AHS.GC.authorizationportal" = "AuthorizationPortal"
            "AHS.GC.ConfigAPI"         = "CONFIGAPI"
            "AHS.GC.SmartComm"         = "SmartCommAPI"
            "account"                  = "CloudAPI"
            "activity"                 = "CloudAPI"
            "admin"                    = "CloudAPI"
            "assessments"              = "CloudAPI"
            "master"                   = "CloudAPI"
            "member"                   = "CloudAPI"
          }

          if (-not (Test-Path $sourcePath)) {
            Write-Host "‚ö†Ô∏è Skipping $name ‚Äî no extracted folder found"
            exit 0
          }

          $files = Get-ChildItem -Path $sourcePath -Recurse | Where-Object { -not $_.PSIsContainer }
          foreach ($file in $files) {
            $relativePath = $file.FullName.Substring($sourcePath.Length + 1)
            $destinationPath = "C:\\inetpub\\wwwroot\\Deployment\\GITHUB\\$($targetMap[$name])\\$relativePath"
            $content = Get-Content -Path $file.FullName -Raw

            $scriptLines = @()
            $scriptLines += "\$content = @'"
            $scriptLines += $content
            $scriptLines += "'@"
            $scriptLines += "Set-Content -Path `"$destinationPath`" -Value \$content"

            $ssmFile = "$workspace\ssm-script-$name.txt"
            $scriptLines | Out-File -FilePath $ssmFile -Encoding UTF8

            aws ssm send-command `
              --document-name "AWS-RunPowerShellScript" `
              --targets "Key=instanceIds,Values=$env:EC2_INSTANCE_ID" `
              --parameters commands=@"$ssmFile" `
              --region $env:AWS_REGION `
              --output text
          }
