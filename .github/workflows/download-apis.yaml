name: Download and Deploy APIs (PowerShell)

on:
  workflow_dispatch:
    inputs:
      apiFolder:
        description: 'API folder to download (or "all")'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - AHS.GC.Web
          - AHS.GC.authorizationportal
          - AHS.GC.ConfigAPI
          - AHS.GC.SmartComm
          - AHS.GC.Cloud
      cloudApi:
        description: 'Specific Cloud API to download (or "all")'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - account
          - activity
          - admin
          - assessments
          - master
          - member

jobs:
  download:
    runs-on: self-hosted
    env:
      RELEASE_REPO: Npraveenreddy/artifacts
      RELEASE_TAG: ${{ secrets.TAG }}
      GH_TOKEN: ${{ secrets.ARTIFACTS_PAT }}

    steps:
      - name: Ensure artifacts folder exists
        shell: powershell
        run: |
          $artifactsPath = Join-Path $env:GITHUB_WORKSPACE "artifacts"
          if (-not (Test-Path $artifactsPath)) {
              New-Item -Path $artifactsPath -ItemType Directory | Out-Null
          }

      - name: Download Artifacts from Release
        shell: powershell
        run: |
          $apiFolder = "${{ github.event.inputs.apiFolder }}"
          $cloudApi  = "${{ github.event.inputs.cloudApi }}"
          $artifactsPath = Join-Path $env:GITHUB_WORKSPACE "artifacts"

          $topLevelApis = @(
            "AHS.GC.Web",
            "AHS.GC.authorizationportal",
            "AHS.GC.ConfigAPI",
            "AHS.GC.SmartComm",
            "AHS.GC.Cloud"
          )

          $cloudSubApis = @(
            "account",
            "activity",
            "admin",
            "assessments",
            "master",
            "member"
          )

          function Download-Zip($name) {
            $zipPath = Join-Path $artifactsPath "$name.zip"
            echo $env:GH_TOKEN | gh auth login --with-token
            gh release download $env:RELEASE_TAG `
              --repo $env:RELEASE_REPO `
              --pattern "$name.zip" `
              --dir $artifactsPath `
              --clobber
            if (Test-Path $zipPath) {
              Write-Host "Downloaded $name.zip"
            } else {
              Write-Error "Failed to download $name.zip"
              exit 1
            }
          }

          if ($apiFolder -eq "all") {
            foreach ($api in $topLevelApis) {
              if ($api -ne "AHS.GC.Cloud") {
                Download-Zip $api
              }
            }
          } elseif ($apiFolder -ne "AHS.GC.Cloud") {
            Download-Zip $apiFolder
          }

          if ($cloudApi -eq "all") {
            foreach ($sub in $cloudSubApis) {
              Download-Zip $sub
            }
          } elseif ($cloudSubApis -contains $cloudApi) {
            Download-Zip $cloudApi
          }

      - name: Upload artifacts for deploy
        uses: actions/upload-artifact@v4
        with:
          name: apis
          path: artifacts/**/*.zip

  deploy:
    runs-on: self-hosted
    needs: download

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: apis
          path: artifacts

      - name: Deploy APIs to IIS folders
        shell: powershell
        run: |
          $artifactsDir = Join-Path $env:GITHUB_WORKSPACE "artifacts"
          $tempDir = Join-Path $env:GITHUB_WORKSPACE "temp"
          if (-not (Test-Path $tempDir)) {
            New-Item -Path $tempDir -ItemType Directory | Out-Null
          }

          # Mapping of zip names to IIS folders
          $mapping = @{
            "AHS.GC.Web"                 = "C:\inetpub\wwwroot\Deployment\GITHUB\Portal"
            "AHS.GC.authorizationportal" = "C:\inetpub\wwwroot\Deployment\GITHUB\AuthorizationPortal"
            "AHS.GC.ConfigAPI"           = "C:\inetpub\wwwroot\Deployment\GITHUB\CONFIGAPI"
            "AHS.GC.SmartComm"           = "C:\inetpub\wwwroot\Deployment\GITHUB\SmartCommAPI"
            "account"                    = "C:\inetpub\wwwroot\Deployment\GITHUB\CloudAPI\Account"
            "activity"                   = "C:\inetpub\wwwroot\Deployment\GITHUB\CloudAPI\Activity"
            "admin"                      = "C:\inetpub\wwwroot\Deployment\GITHUB\CloudAPI\Admin"
            "assessments"                = "C:\inetpub\wwwroot\Deployment\GITHUB\CloudAPI\Assessments"
            "master"                     = "C:\inetpub\wwwroot\Deployment\GITHUB\CloudAPI\Master"
            "member"                     = "C:\inetpub\wwwroot\Deployment\GITHUB\CloudAPI\Member"
          }

          function Invoke-Robocopy($source, $target) {
            robocopy $source $target /E /MIR /R:3 /W:5
            if ($LASTEXITCODE -ge 8) {
              Write-Error "Robocopy failed with exit code $LASTEXITCODE"
              exit $LASTEXITCODE
            } else {
              Write-Host "Robocopy completed with exit code $LASTEXITCODE (success/acceptable)"
            }
          }

          # Process all zip files
          Get-ChildItem $artifactsDir -Filter *.zip | ForEach-Object {
            $name = $_.BaseName
            if ($mapping.ContainsKey($name)) {
              $target = $mapping[$name]
              Write-Host "Deploying $($_.Name) to $target ..."
              $extractPath = Join-Path $tempDir $name
              if (Test-Path $extractPath) {
                Remove-Item $extractPath -Recurse -Force
              }
              New-Item -Path $extractPath -ItemType Directory | Out-Null
              Expand-Archive -Path $_.FullName -DestinationPath $extractPath -Force
              Invoke-Robocopy $extractPath $target
              Remove-Item $_.FullName -Force
            } else {
              Write-Warning "No mapping found for $name.zip, skipping..."
            }
          }
