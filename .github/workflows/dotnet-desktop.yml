name: Build APIs Manually

on:
  workflow_dispatch:
    inputs:
      apiFolder:
        description: 'API folder to build (or "all" to build everything)'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - AHS.GC.Web
          - AHS.GC.authorizationportal
          - AHS.GC.ConfigAPI
          - AHS.GC.SmartComm
          - AHS.GC.Cloud
      cloudApi:
        description: 'Specific Cloud API to build (or "all")'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - account
          - activity
          - admin
          - assessments
          - master
          - member

jobs:
  build:
    runs-on: windows-latest
    env:
      RELEASE_TAG: v8.17.2025.08_RC1
      RELEASE_REPO: Npraveenreddy/artifacts
      GITHUB_TOKEN: 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
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '6.0.x'

      - name: Install GitHub CLI
        run: |
          choco install gh -y

      # --- Build & Upload AHS.GC.Web ---
      - name: Build AHS.GC.Web
        if: ${{ github.event.inputs.apiFolder == 'all' || github.event.inputs.apiFolder == 'AHS.GC.Web' }}
        shell: pwsh
        run: |
          $proj = Get-ChildItem "AHS.GC.Web" -Filter "*.csproj" -Recurse | Select-Object -First 1
          if (-not $proj) { Write-Error "No .csproj found in AHS.GC.Web"; exit 1 }
          dotnet restore $proj.FullName
          dotnet build $proj.FullName --configuration Release --no-restore
          Compress-Archive -Path "AHS.GC.Web/**/bin/Release/*" -DestinationPath "AHS.GC.Web.zip"

      - name: Upload AHS.GC.Web.zip to Artifacts Release
        if: ${{ github.event.inputs.apiFolder == 'all' || github.event.inputs.apiFolder == 'AHS.GC.Web' }}
        run: |
          gh release upload $env:RELEASE_TAG "AHS.GC.Web.zip" --repo $env:RELEASE_REPO --clobber

      # --- Build & Upload AHS.GC.authorizationportal ---
      - name: Build AHS.GC.authorizationportal
        if: ${{ github.event.inputs.apiFolder == 'all' || github.event.inputs.apiFolder == 'AHS.GC.authorizationportal' }}
        shell: pwsh
        run: |
          $proj = Get-ChildItem "AHS.GC.authorizationportal" -Filter "*.csproj" -Recurse | Select-Object -First 1
          if (-not $proj) { Write-Error "No .csproj found in AHS.GC.authorizationportal"; exit 1 }
          dotnet restore $proj.FullName
          dotnet build $proj.FullName --configuration Release --no-restore
          Compress-Archive -Path "AHS.GC.authorizationportal/**/bin/Release/*" -DestinationPath "AHS.GC.authorizationportal.zip"

      - name: Upload AHS.GC.authorizationportal.zip to Artifacts Release
        if: ${{ github.event.inputs.apiFolder == 'all' || github.event.inputs.apiFolder == 'AHS.GC.authorizationportal' }}
        run: |
          gh release upload $env:RELEASE_TAG "AHS.GC.authorizationportal.zip" --repo $env:RELEASE_REPO --clobber

      # --- Build & Upload Cloud Sub-APIs ---
      - name: Build AHS.GC.Cloud subfolders
        if: ${{ github.event.inputs.apiFolder == 'all' || github.event.inputs.apiFolder == 'AHS.GC.Cloud' }}
        shell: pwsh
        run: |
          $cloudBase = "AHS.GC.Cloud"
          $cloudSelection = '${{ github.event.inputs.cloudApi }}'
          $cloudFolders = @()

          if ($cloudSelection -ne 'all') {
              $cloudFolders += "$cloudBase\$cloudSelection"
          } else {
              $cloudFolders += Get-ChildItem $cloudBase -Directory | ForEach-Object { $_.FullName }
          }

          foreach ($folder in $cloudFolders) {
              $name = Split-Path $folder -Leaf
              Write-Host "üîß Building Cloud API: $name"
              $proj = Get-ChildItem $folder -Filter "*.csproj" -Recurse | Select-Object -First 1
              if (-not $proj) {
                  Write-Host "‚ùå No .csproj found in $name"
                  continue
              }
              dotnet restore $proj.FullName
              dotnet build $proj.FullName --configuration Release --no-restore

              $zipName = "$name.zip"
              Compress-Archive -Path "$folder/**/bin/Release/*" -DestinationPath $zipName
              gh release upload $env:RELEASE_TAG $zipName --repo $env:RELEASE_REPO --clobber
          }
