name: Build APIs Manually

on:
  workflow_dispatch:
    inputs:
      apiFolder:
        description: 'Select APIs to build (use "|" to select multiple, or "all")'
        required: true
        default: 'all'
        type: string
      cloudApi:
        description: 'Select Cloud APIs to build (use "|" to select multiple, or "all")'
        required: true
        default: 'all'
        type: string

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '6.0.x'

      # --- Build Web ---
      - name: Build AHS.GC.Web
        if: contains(split('${{ github.event.inputs.apiFolder }}', '|'), 'all') || contains(split('${{ github.event.inputs.apiFolder }}', '|'), 'AHS.GC.Web')
        shell: pwsh
        run: |
          $proj = Get-ChildItem "AHS.GC.Web" -Filter "*.csproj" -Recurse | Select-Object -First 1
          if (-not $proj) { Write-Error "No .csproj found in AHS.GC.Web"; exit 1 }
          dotnet restore $proj.FullName
          dotnet build $proj.FullName --configuration Release --no-restore

      # --- Build Authorization Portal ---
      - name: Build AHS.GC.authorizationportal
        if: contains(split('${{ github.event.inputs.apiFolder }}', '|'), 'all') || contains(split('${{ github.event.inputs.apiFolder }}', '|'), 'AHS.GC.authorizationportal')
        shell: pwsh
        run: |
          $proj = Get-ChildItem "AHS.GC.authorizationportal" -Filter "*.csproj" -Recurse | Select-Object -First 1
          if (-not $proj) { Write-Error "No .csproj found in AHS.GC.authorizationportal"; exit 1 }
          dotnet restore $proj.FullName
          dotnet build $proj.FullName --configuration Release --no-restore

      # --- Build ConfigAPI ---
      - name: Build AHS.GC.ConfigAPI
        if: contains(split('${{ github.event.inputs.apiFolder }}', '|'), 'all') || contains(split('${{ github.event.inputs.apiFolder }}', '|'), 'AHS.GC.ConfigAPI')
        shell: pwsh
        run: |
          $proj = Get-ChildItem "AHS.GC.ConfigAPI" -Filter "*.csproj" -Recurse | Select-Object -First 1
          if (-not $proj) { Write-Error "No .csproj found in AHS.GC.ConfigAPI"; exit 1 }
          dotnet restore $proj.FullName
          dotnet build $proj.FullName --configuration Release --no-restore

      # --- Build SmartComm ---
      - name: Build AHS.GC.SmartComm
        if: contains(split('${{ github.event.inputs.apiFolder }}', '|'), 'all') || contains(split('${{ github.event.inputs.apiFolder }}', '|'), 'AHS.GC.SmartComm')
        shell: pwsh
        run: |
          $proj = Get-ChildItem "AHS.GC.SmartComm" -Filter "*.csproj" -Recurse | Select-Object -First 1
          if (-not $proj) { Write-Error "No .csproj found in AHS.GC.SmartComm"; exit 1 }
          dotnet restore $proj.FullName
          dotnet build $proj.FullName --configuration Release --no-restore

      # --- Build Cloud Sub-APIs ---
      - name: Build AHS.GC.Cloud subfolders
        if: contains(split('${{ github.event.inputs.apiFolder }}', '|'), 'all') || contains(split('${{ github.event.inputs.apiFolder }}', '|'), 'AHS.GC.Cloud')
        shell: pwsh
        run: |
          $cloudBase = "AHS.GC.Cloud"
          $failedBuilds = @()
          $cloudSelection = '${{ github.event.inputs.cloudApi }}' -split '\|' | ForEach-Object { $_.Trim() }

          if ($cloudSelection -contains 'all') {
              $cloudFolders = Get-ChildItem $cloudBase -Directory | ForEach-Object { $_.FullName }
          } else {
              $cloudFolders = $cloudSelection | ForEach-Object { Join-Path $cloudBase $_ }
          }

          foreach ($folder in $cloudFolders) {
              $name = Split-Path $folder -Leaf
              Write-Host "=== Building Cloud API: $name ==="
              $proj = Get-ChildItem $folder -Filter "*.csproj" -Recurse | Select-Object -First 1
              if ($proj) {
                  dotnet restore $proj.FullName
                  if ($LASTEXITCODE -ne 0) { $failedBuilds += $name; continue }
                  dotnet build $proj.FullName --configuration Release --no-restore
                  if ($LASTEXITCODE -ne 0) { $failedBuilds += $name }
              } else {
                  Write-Host "‚ùå No .csproj found in $name"
                  $failedBuilds += $name
              }
          }

          if ($failedBuilds.Count -gt 0) {
              Write-Error "Cloud build failed for: $($failedBuilds -join ', ')"
              exit 1
          }
