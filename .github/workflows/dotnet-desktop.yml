name: Build APIs Manually

on:
  workflow_dispatch:
    inputs:
      apiFolder:
        description: 'API folder to build (or "all" to build everything)'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - AHS.GC.Web
          - AHS.GC.authorizationportal
          - AHS.GC.ConfigAPI
          - AHS.GC.SmartComm
          - AHS.GC.Cloud
          - AHS.GC.Cloud.Account
          - AHS.GC.Cloud.Activity
          # Add more Cloud sub-APIs here as needed

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '6.0.x'

      # --- Build Web ---
      - name: Build AHS.GC.Web
        if: ${{ github.event.inputs.apiFolder == 'all' || github.event.inputs.apiFolder == 'AHS.GC.Web' }}
        shell: pwsh
        run: |
          $proj = Get-ChildItem "AHS.GC.Web" -Filter "*.csproj" -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1
          if (-not $proj) { Write-Error "No .csproj found in AHS.GC.Web"; exit 1 }
          dotnet restore $proj.FullName
          dotnet build $proj.FullName --configuration Release --no-restore

      # --- Build Authorization Portal ---
      - name: Build AHS.GC.authorizationportal
        if: ${{ github.event.inputs.apiFolder == 'all' || github.event.inputs.apiFolder == 'AHS.GC.authorizationportal' }}
        shell: pwsh
        run: |
          $proj = Get-ChildItem "AHS.GC.authorizationportal" -Filter "*.csproj" -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1
          if (-not $proj) { Write-Error "No .csproj found in AHS.GC.authorizationportal"; exit 1 }
          dotnet restore $proj.FullName
          dotnet build $proj.FullName --configuration Release --no-restore

      # --- Build ConfigAPI ---
      - name: Build AHS.GC.ConfigAPI
        if: ${{ github.event.inputs.apiFolder == 'all' || github.event.inputs.apiFolder == 'AHS.GC.ConfigAPI' }}
        shell: pwsh
        run: |
          $proj = Get-ChildItem "AHS.GC.ConfigAPI" -Filter "*.csproj" -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1
          if (-not $proj) { Write-Error "No .csproj found in AHS.GC.ConfigAPI"; exit 1 }
          dotnet restore $proj.FullName
          dotnet build $proj.FullName --configuration Release --no-restore

      # --- Build SmartComm ---
      - name: Build AHS.GC.SmartComm
        if: ${{ github.event.inputs.apiFolder == 'all' || github.event.inputs.apiFolder == 'AHS.GC.SmartComm' }}
        shell: pwsh
        run: |
          $proj = Get-ChildItem "AHS.GC.SmartComm" -Filter "*.csproj" -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1
          if (-not $proj) { Write-Error "No .csproj found in AHS.GC.SmartComm"; exit 1 }
          dotnet restore $proj.FullName
          dotnet build $proj.FullName --configuration Release --no-restore

      # --- Build All Cloud Sub-APIs ---
      - name: Build AHS.GC.Cloud subfolders
        if: ${{ github.event.inputs.apiFolder == 'all' || github.event.inputs.apiFolder == 'AHS.GC.Cloud' }}
        shell: pwsh
        run: |
          $cloudFolders = Get-ChildItem "AHS.GC.Cloud" -Directory
          $failedBuilds = @()

          foreach ($folder in $cloudFolders) {
            $name = Split-Path $folder.FullName -Leaf
            Write-Host "=== Building Cloud API: $name ==="
            $proj = Get-ChildItem $folder.FullName -Filter "*.csproj" -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1
            if ($proj) {
              dotnet restore $proj.FullName
              if ($LASTEXITCODE -ne 0) { $failedBuilds += $name; continue }
              dotnet build $proj.FullName --configuration Release --no-restore
              if ($LASTEXITCODE -ne 0) { $failedBuilds += $name }
            }
            else {
              Write-Host "❌ No .csproj found in $name"
              $failedBuilds += $name
            }
          }

          if ($failedBuilds.Count -gt 0) {
            Write-Error "Cloud build failed for: $($failedBuilds -join ', ')"
            exit 1
          }

      # --- Build Specific Cloud API ---
      - name: Build specific Cloud API
        if: ${{ startsWith(github.event.inputs.apiFolder, 'AHS.GC.Cloud.') && github.event.inputs.apiFolder != 'AHS.GC.Cloud' }}
        shell: pwsh
        run: |
          $folder = "${{ github.event.inputs.apiFolder }}"
          Write-Host "=== Building Specific Cloud API: $folder ==="
          $proj = Get-ChildItem $folder -Filter "*.csproj" -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1
          if ($proj) {
            dotnet restore $proj.FullName
            if ($LASTEXITCODE -ne 0) { Write-Error "Restore failed for $folder"; exit 1 }
            dotnet build $proj.FullName --configuration Release --no-restore
            if ($LASTEXITCODE -ne 0) { Write-Error "Build failed for $folder"; exit 1 }
          }
          else {
            Write-Error "❌ No .csproj found in $folder"
            exit 1
          }
